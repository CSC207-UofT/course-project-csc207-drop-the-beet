
# Phase 1 Progress Report

## Updated Specification
* Briefly highlight any additional functionality that you have implemented between phase 0 and the end of phase 1.
* Implemented an early stage of GUI functionalities for users to login, register, add ToDoList and Schedule.
* Connected Database SQLite as data storage for user information and login credentials.
* Implemented Momento and Observer design pattern.

## Phase 0 Specification (for reference)
Running the project starts a web-based service that allows users to interact with a daily planner web-application.
While running, the web-based application will run a daily planner with a graphic user interface. On the interface,
users can add, delete, search, or modify their daily plans by clicking on the buttons –  selecting the calender and
using the checkbox, and input data with a basic widget to interact with the system.
The web-based application supports multi-users and mysql database search as well as message queues.
* Login: This feature will prompt a widget which allows users to enter their username and password. The user identity is then authenticated.
* New_Schedule: Add a new schedule to the to do list of the current user. This will prompt a widget that allows users to input the event, place, flagged or not, and due date, the time remaining is then being calculated and will appear on this event.
* Delete: This button allows users to delete an event. The event will be marked as deleted and will appear in the trash bin. The time remaining is still being calculated and the users are still able to check this event in the trash bin.
* Edit: This button will enable the users to edit any events they wish to modify. A widget is prompted with contents recorded in the database. The users are able to modify the event, place, and due date. Then, it will be updated in the database.
* Add_List: This feature allows users to add a custom to-do list. This will prompt a widget that allows users to input the name of the to-do list, and the priority of the list. Then a to-do list will be created in the system.
* ToDoList: This feature allows users to retroact all the reminders. A new page will be prompted and list all the reminders including the past ones.
* Today: This feature allows users to retroact all the reminders that will be due by today. A new page will be prompted and list all the events that will be due by today in the user's to-do list.
* Flagged: This feature allows users to retroact all the reminders that are flagged. A new page will be prompted and list all the reminders that are flagged.
* Past: This feature allows users to retroact all the reminders that have passed due. A new page will be prompted and list all the reminders that are past events.
* Past due: This feature allows users to retroact all the reminders that are not completed and have passed due. A new page will be prompted and list all the reminders that are not completed and have passed due.

## Functions we have added in phase 1
* Signup: This feature allows the user to sign up with their email, password, and username.
* Forget password: This feature allows the user to get their password.
* Schedule: This feature returns all schedules


## Description of any major design decisions our group has made
We started phase 1 by planning to use the database. We decided to use SQLite for our database, since there is a way for us to view the data, it is easy to check if there is anything wrong when we are reading or writing the database. We also have deleted or added some specifications. When we have a visualizable GUI, we found some specifications are not needed. For example “Past due”. 
We also decided to add ID for all schedules and to-do lists. We have found that it may be possible that two schedules or to-do lists are the same. In order to match the correct schedule or to-do lists, we assigned each task with different IDs.
 
 
## Brief description of how our project adheres to Clean Architecture
 
We separate our classes, in terms of their usage, by entities, use cases,  controllers, and UI, databases. When we were doing this project, we have always found that the methods in the controller call the methods in entities. Therefore we created methods in use cases to call the methods in entities, then let the methods in the controller to call the methods in use cases. We try to make each class depend on its adjacent layer or within the same layer. And make sure they only point inwards. 
We have divided the functions of controllers into 2 parts. One has the methods more about the use cases, and one has the methods more about the UI. So that they can connect the use cases and UI and database better. 
But we are not sure if we can do it in that way. For now we have too many controllers. Some of the controllers function more like glue codes with UI or Database. We are trying to make them clearer.
 
## Brief description of how our project is consistent with the SOLID design principles
 * Single responsibility principle (SRP)
	* Each of our classes have a single responsibility.
* Open/closed principle (OCP)
	* We have a violation to the open/closed principle because if we wish to include other types of tasks we are unable to implement it currently. However we do think the two task types are sufficient enough because these two are what most daily planner apps use.
* Liskov substitution principle (LSP)
	* There is no implementation relation in our project, hence there should be no violation on LSP
* Interface segregation principle (ISP)
	* All the interfaces are kept small to avoid any unnecessary implementations of codes and potential corrupting depency.
* Dependency inversion principle (DIP)
	* We have defined the high level classes before brainstorming the lower classes. During the implementation of User and UserManager we have made the mistake of incorrectly depending on ScheduleManager and UserManager, but the mistake was corrected by now.
	
## Brief description of which packaging strategies we considered, which we decided to use, and why
The packaging strategy we considered is to separate out classes by feature. We have a UI package, a JDBCSQlite package, a planner package and a memento package. 
* The UI package contains glue codes with the GUI and some controllers with the methods for the GUI. 
* The JDBCSQlite package contains all methods for the database.
* The planner package contains Entities, UseCases, and Controller package. The controllers in the Controller package are the back end controllers connecting the different types of classes, this is where every operation is processed. Data is taken and processed and sent to the planner package; and the planner package takes a series of operations, feeds the information to the UI and displays the human-readable information to our users through the UI. 
* Last but not least, we have a memento package. This is a design pattern our group implemented and will be explained in the “Summary of design patterns”.
* We use package by feature instead of the traditional packaging style (Clean Architecture, Entities, Use Cases etc.). The main reason is that we have many different applications of different coding. For example database, GUI, backend. Using feature packaging we would avoid clusters of code in one package which would result in difficult class search and organization. As well as to maximize Open/Closed Principle, making future extensions easier.
 
## Summary of design patterns our group has implemented (or plans to implement)
* We have implemented the observer design pattern for notifications. It would be logical to view the user as the observer potentially requesting to check their schedule and todo list status. As well as having an updater to inform the observer for any changes to the schedule and todo list the user has added.
* We also have implemented memento design so that the user can undo completion or deletion for to-do lists. 

## Open questions our group is struggling with
* There are many compatibility issues with packages in Intellij not being recognized, even if we are using the same versions of SDK. How do we minimize this issue?
* How should we approach efficient data storage in the database without losing accessibility to the data?
* Does connecting the database to the back end for the back end to manipulate data in the database count as an adapter/bridge design pattern? If not, would it make sense to design the communication between the database with backend and GUI with the database to be an adapter/bridge pattern?
* Are the glue codes of the GUI at the level of the controller or the frameworks?
## What has worked well so far with our design
We have successfully integrated the initial versions of the GUI and the database. 
## Summary of what each group member has been working on and plans to work on next

	
David, Yi and Vincent have been working on the back end, they will keep working on it, and to discover more functions in our project. They will also help with the front end work if necessary. Hao has been working on the UI. Sunny has been working on the Database. Yilin has been working on the connections of the backend and frontend, and the memento design pattern.They will keep working on those fields. 
